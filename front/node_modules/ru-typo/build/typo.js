var any = "[абвгдеёжзийклмнопрстуфхцчшщъыьэюя]";
var vowel = "[аеёиоуыэюя]";
var consonant = "[бвгджзклмнпрстфхцчшщ]";
var sign = "[йъь]";
var shy = "­"; // &shy;

var nonBreakingHyphen = "‑"; // &#8209;

var nonBreakingSpace = " "; // &nbsp;

var dash = "—"; // &mdash;

var nonBreakingDash = "–"; // &#8211;

var openingQuote = "«";
var closingQuote = "»";
var preposiciones = {
  corto: "и|а|в|к|у|с|о|не|но|на|из|от|об|до|по|во|за|со",
  largo: "над|под|как"
};
var defaultOptions = {
  hyphens: false,
  digits: false,
  digitsR: false,
  header: false,
  ndash: false,
  quotes: false
};
var patterns = {
  common: [[new RegExp("&nbsp;", "gi"), nonBreakingSpace], [new RegExp(" (-|–|—) ", "g"), "".concat(nonBreakingSpace).concat(dash, " ")], [new RegExp(" {2}", "g"), " "], [new RegExp("-(й|я|е) ", "g"), "".concat(nonBreakingHyphen, "$1 ")], [new RegExp("-(й|я|е) ", "g"), "".concat(nonBreakingHyphen, "$1").concat(nonBreakingSpace)], [new RegExp(" (".concat(preposiciones.corto, ") "), "gi"), " $1".concat(nonBreakingSpace)], [new RegExp("".concat(nonBreakingSpace, "(").concat(preposiciones.corto, ") "), "gi"), "".concat(nonBreakingSpace, "$1").concat(nonBreakingSpace)], [new RegExp("^(".concat(preposiciones.corto, ") "), "gi"), "$1".concat(nonBreakingSpace)]],
  digits: [[new RegExp(" (\\d+) ", "g"), "".concat(nonBreakingSpace, "$1").concat(nonBreakingSpace)], [new RegExp("".concat(nonBreakingSpace, "(\\d+) "), "g"), "".concat(nonBreakingSpace, "$1").concat(nonBreakingSpace)] // TODO TESTS
  ],
  digitsR: [[new RegExp(" (\\d+) ", "g"), " $1".concat(nonBreakingSpace)]],
  // LIKELY TO BE RENAMED AND EXTENDED (FOR MORE GENERAL DASH HANDLING),
  // USE WITH CAUTION
  ndash: [[new RegExp("-", "g"), "".concat(nonBreakingDash)]],
  header: [[new RegExp(" (".concat(preposiciones.largo, ") "), "gi"), " $1".concat(nonBreakingSpace)]],
  hyphens: [[new RegExp("(".concat(sign, ")(").concat(any).concat(any, ")"), "ig"), "$1".concat(shy, "$2")], [new RegExp("(".concat(vowel, ")(").concat(vowel).concat(any, ")"), "ig"), "$1".concat(shy, "$2")], [new RegExp("(".concat(vowel).concat(consonant, ")(").concat(consonant).concat(vowel, ")"), "ig"), "$1".concat(shy, "$2")], [new RegExp("(".concat(consonant).concat(vowel, ")(").concat(consonant).concat(vowel, ")"), "ig"), "$1".concat(shy, "$2")], [new RegExp("(".concat(vowel).concat(consonant, ")(").concat(consonant).concat(consonant).concat(vowel, ")"), "ig"), "$1".concat(shy, "$2")], [new RegExp("(".concat(vowel).concat(consonant).concat(consonant, ")(").concat(consonant).concat(consonant).concat(vowel, ")"), "ig"), "$1".concat(shy, "$2")]],
  quotes: [[new RegExp('\\="([^"]*)"', "gmi"), "='$1'"], [new RegExp("\"(".concat(any, "|[0-9])"), "gmi"), "".concat(openingQuote, "$1")], [new RegExp("\"", "gmi"), closingQuote], [new RegExp("\\='([^']*)'", "gmi"), '="$1"'] // prevents HTML attributes like href="https://github.com" from being broken
  ]
}; // typo :: String -> Object -> String

function typo(s) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : defaultOptions;

  if (s == null || typeof s !== "string") {
    return s;
  }

  var P = Object.keys(patterns).reduce(function (acc, key) {
    return options[key] ? acc.concat(patterns[key]) : acc;
  }, patterns.common);
  return P.reduce(function (acc, p) {
    return acc.replace(p[0], p[1]);
  }, s);
}

export { typo as default };
